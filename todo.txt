Features To Add:
- Camera
    - can be fixed to something
    - can be used to configure the screen
- Vector field for forces
- Mobile vs regular entities
- Attach external forces to states or to entities
    - use case: gravity to attach to a state
    - use case: knockback on an entity
- Better handling of events
- Scene vs Environment???
- mutable and immutable access
- somehow make a class for sidescroller (maybe a subclass of camera? or some sort of state?)
    - also one for where the camera is locked to the player
- transition action ordering/reordering?
- figure/shape/frame class to be used for sprites, shaped, and animation frames

Features Added:
- Three types of data:
    - transient scene data (created when entering scene, destroyed when leaving)
    - static scene data (attached to the scene(s), not destroyed when leaving the scene(s) but only accessible when in the scene(s))
    - game data (attached to the game, available to every scene)

Misc:
- No need to be too fancy off the get go:
    - e.g.: don't make something a property until it has to be
    - e.g.: don't make something a required abstract method until it has to be

Todo:
- make git repo (DONE)
- rename state to scene (DONE)
- make system for scenes to hand data over to new scenes (DONE)
- improve data store system (DONE)
- finish transition action system (DONE)
    - add transition action decorator to statemachine (DONE)
- add feature to help with transition actions (DONE)
- add feature to register default factory for user data store transient attributes (DONE)
- actions dependent on transition conditions (DONE)
- make dedicated transition condition type to resolve warnings (DONE)
- make dedicated transition action type (NOT NEEDED)
- make transition action and transition condition systems better (DONE)
    - registering a function as a transition action twice (DONE)
    - registering multiple transition actions per condition (DONE)
- refactor to remove statemachine class (DONE)
    - instead of finalizing using statemachine, when a new class is made remove the strings from the previous classes in the init subclass (DONE)
    - can use class attribute in scene base class to keep track of created classes by name (DONE)
    - also have to keep track of classes referred to by name and methods for checking if all the strings have been resolved (DONE)
- think of system for keeping docstrings when making transition actions/conditions
- testing, lots of testing
- repackage as package
